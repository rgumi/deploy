# This file contains the CI/CD Pipeline in GitLab

variables:
  TAG: $CI_COMMIT_REF_NAME
  PROXY: "http://$WB_HTTP_PROXY_HOST:$WB_HTTP_PROXY_PORT"
  GO_VERSION: "1.15"
  SONAR_OPTS: " -Dsonar.sources=.
    -Dsonar.exclusions=./**/*_test.go
    -Dsonar.projectKey=depoy
    -Dsonar.host.url=$SONAR_HOST_URL
    -Dsonar.login=$SONAR_AUTH_TOKEN
    -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA
    -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME
    -Dsonar.gitlab.project_id=$CI_PROJECT_ID
    -Dsonar.branch.name=$CI_COMMIT_REF_NAME
    -Dsonar.go.tests.reportPaths=sonar/test-report.out
    -Dsonar.go.coverage.reportPaths=sonar/coverage-report.out
    -Dsonar.tests=.
    -Dsonar.test.inclusions=./**/*_test.go
    -Dsonar.test.exclusions=./**/vendor/**
    --debug -Dsonar.verbose=true"

stages:
  - scan
  - build1
  - build2
  - build3

cache:
  key: ${CI_COMMIT_REF_SLUG}
  policy: pull-push
  paths:
    - webapp/dist
    - sonar

scan:go:
  stage: scan
  tags:
    - run_docker
  image: $MTR_URL/sonar-scanner:golang
  script:
    - go env -w GOOS=linux GOARCH=amd64 CGO_ENABLED=0
    - go build

    - go test ./... -coverprofile="sonar/coverage-report.out"
    - go test ./... -json > sonar/test-report.out
    - sonar-scanner $SONAR_OPTS

build:vue:
  stage: build1
  tags:
    - run_docker
  image: node
  script:
    - cd webapp
    - npm install
    - npm run build
  artifacts:
    paths:
      - webapp/dist
    expire_in: 1 hour

build:go:
  stage: build2
  tags:
    - run_docker
  image: golang:$GO_VERSION
  script:
    - mkdir sonar/ | true
    - ls -ltr webapp/dist
    - go env -w GOOS=linux GOARCH=amd64 CGO_ENABLED=0
    - go get -u github.com/gobuffalo/packr/v2/packr2
    - packr2 build -a -o depoy .

  artifacts:
    paths:
      - depoy
      - sonar/
    expire_in: 1 hour

build:docker:
  stage: build3
  tags:
    - run_shell
  script:
    - "docker build
      --build-arg HTTP_PROXY=$PROXY
      --build-arg HTTPS_PROXY=$PROXY
      --tag $MTR_URL/depoy:$TAG
      --file Dockerfile ."

    - docker push $MTR_URL/depoy:$TAG
    - docker image rm $MTR_URL/depoy:$TAG
